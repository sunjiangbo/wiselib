#!/usr/bin/env python2
# vim: set ft=python:

# vim usage:
# :set mp=make\ %\\\|&\ detemplate

import sys
import os
import os.path
import re
import itertools

remove_namespaces = ['wiselib', 'std']
depth = 0

# if you use an IDE, you might want to set this to a very high value so the
# IDE sees the full file paths!
filename_parts = 2
squash = True

def bracedepth(line, maxdepth, braces='<>'):
	depth = 0
	r = ''
	escaped = False
	pos = 0
	p = 0
	for c in line:
		if not escaped and c == braces[1]:
			if (not line[pos - len('operator'):].startswith('operator') and
				not line[pos - len('operator' + braces[1]):].startswith('operator' + braces[1])):
				depth -= 1
			
		if depth <= maxdepth:
			r += c
			
		if not escaped and c == braces[0]:
			if (not line[pos  - len('operator'):].startswith('operator') and
				not line[pos  - len('operator' + braces[1]):].startswith('operator' + braces[0])):
					
				depth += 1
				if depth == maxdepth + 1:
					p = pos
			
		if c == '-':
			escaped = True
		elif escaped:
			escaped = False
		pos += 1
	
	if depth > maxdepth:
		r += line[p + 1:]
	
	return r

def shorten_filenames(s, parts):
	r = ''
	for line in s.splitlines():
		#m = re.match('^([^:]+)(:\d+:\d+:.*$)', line)
		m = re.match('^([^:\\s]+)(:.*$)', line)
		if m:
			r += os.path.split(m.group(1))[1] + m.group(2) + '\n'
			#print "----- " + line + " ---> " + '/'.join(os.path.split(m.group(1))[-parts:]) + m.group(2) + '\n'
		else:
			r += line + '\n'
	return r

def highlight_errors(s):
	colors = {
			'error': 31,
			'invalid': 31,
			'fehler': 31,
			'warning': 33,
			'warnung': 33,
			'undefined reference': 31,
	}
	
	r = ''
	for line in s.splitlines():
		for keyword, color in colors.items():
			if keyword in line.lower():
				r += '\x1b[' + str(color) + 'm' + line + '\x1b[m\n'
				break
		else:
			r += line + '\n'
	return r

def highlight_words(s):
	colors = {
			' in ': 32,
			'error:': 31,
			'warning:': 33,
			'undefined reference': 31,
			'operator': 33,
			'const': 33,
			'char': 33,
			'void': 33,
			'std::': 33,
			'ofstream': 33,
			'basic_ostream': 33,
			'wiselib::': 35,
			'In instantiation': 33,
			'required from': 32,
			'cannot convert': 36,
			'template': 34,
			'->': 34,
			'note:': 35,
	}
	
	r = ''
	for line in s.splitlines():
		while line:
			earliest = None
			for keyword, color in colors.items():
				if keyword in line.lower():
					e = line.lower().find(keyword)
					if earliest is None or e < earliest:
						earliest = line.lower().find(keyword)
						earliest_kw = keyword
						earliest_color = color
					
			if earliest is not None:
				p = earliest
				r += line[:p] + '\x1b[' + str(earliest_color) + 'm' + line[p:p + len(earliest_kw)] + '\x1b[m'
				line = line[p + len(earliest_kw):]
			else:
				r += line + '\n'
				line = ''
	return r

def compress(s):
	lines = s.splitlines()
	lines = [
			(('%5d ' % len(list(g)))) + k
			for k, g in itertools.groupby(lines)
	]
	return '\n'.join(lines)


def filter(s, cutaway, filename_parts):
	for ns in remove_namespaces:
		s = s.replace(ns + '::', '')
	s = bracedepth(s, cutaway, '<>')
	s = bracedepth(s, 0, '[]')
	s = shorten_filenames(s, filename_parts)
	#s = highlight_errors(s)
	s = highlight_words(s)
	s = compress(s)
	return s
		
if __name__ == '__main__':
	print filter(sys.stdin.read(), depth, filename_parts)


# vim: set ts=3 sw=3 tw=78 noexpandtab :
