#!/usr/bin/env python2
# vim: set ft=python:

# vim usage:
# :set mp=make\ %\\\|&\ detemplate

import sys
import os
import os.path
import re
import itertools
from optparse import OptionParser

remove_namespaces = ['wiselib', 'std']
depth = 0

# if you use an IDE, you might want to set this to a very high value so the
# IDE sees the full file paths!
filename_parts = 2
squash = True

def bracedepth(line, maxdepth, braces='<>', eat = False):
	depth = 0
	r = ''
	escaped = False
	pos = 0
	p = 0
	for c in line:
		if not escaped and c == braces[1]:
			if (not line[pos - len('operator'):].startswith('operator') and
				not line[pos - len('operator' + braces[1]):].startswith('operator' + braces[1])):
				depth -= 1
			
		if not eat:
			if depth <= maxdepth:
				r += c
			
		if not escaped and c == braces[0]:
			if (not line[pos  - len('operator'):].startswith('operator') and
				not line[pos  - len('operator' + braces[1]):].startswith('operator' + braces[0])):
					
				depth += 1
				if depth == maxdepth + 1:
					p = pos
					
		if eat:
			if depth < maxdepth or (depth == maxdepth and c != braces[1] and not escaped):
				r += c
			
		if c == '-':
			escaped = True
		elif escaped:
			escaped = False
		pos += 1
	
	if depth > maxdepth:
		r += line[p + 1:]
	
	return r

def shorten_filenames(s, parts):
	r = ''
	for line in s.splitlines():
		#m = re.match('^([^:]+)(:\d+:\d+:.*$)', line)
		m = re.match('^([^:\\s]+)(:.*$)', line)
		if m:
			r += os.path.split(m.group(1))[1] + m.group(2) + '\n'
			#print "----- " + line + " ---> " + '/'.join(os.path.split(m.group(1))[-parts:]) + m.group(2) + '\n'
		else:
			r += line + '\n'
	return r

def highlight_errors(s):
	colors = {
			'error': 31,
			'invalid': 31,
			'fehler': 31,
			'warning': 33,
			'warnung': 33,
			'undefined reference': 31,
	}
	
	r = ''
	for line in s.splitlines():
		for keyword, color in colors.items():
			if keyword in line.lower():
				r += '\x1b[' + str(color) + 'm' + line + '\x1b[m\n'
				break
		else:
			r += line + '\n'
	return r

def highlight_words(s):
	colors = {
			' in ': (0, 32),
			'error:': (0, 31),
			'warning:': (0, 33),
			'undefined reference': (0, 31),
			'operator': (0, 33),
			'const': (0, 33),
			'char': (0, 33),
			'void': (0, 33),
			'std::': (0, 33),
			'ofstream': (0, 33),
			'basic_ostream': (0, 33),
			'wiselib::': (0, 35),
			'In instantiation': (0, 33),
			'required from': (0, 32),
			'cannot convert': (0, 36),
			'template': (0, 34),
			'->': (0, 34),
			'note:': (0, 35),
			'(': (1, 33),
			')': (1, 33),
			'[': (1, 32),
			']': (1, 32),
			#'<': (1, 33),
			#'>': (1, 33),
			'call will abort at runtime': (0, 31),
	}
	
	r = ''
	for line in s.splitlines():
		while line:
			earliest = None
			for keyword, color in colors.items():
				if keyword in line.lower():
					e = line.lower().find(keyword)
					if earliest is None or e < earliest:
						earliest = line.lower().find(keyword)
						earliest_kw = keyword
						earliest_color = color
					
			if earliest is not None:
				p = earliest
				r += line[:p] + '\x1b[' + str(earliest_color[0]) + ';' + str(earliest_color[1]) + 'm' + line[p:p + len(earliest_kw)] + '\x1b[m'
				line = line[p + len(earliest_kw):]
				if not line:
					r += '\n'
			else:
				r += line + '\n'
				line = ''
	return r

def compress(s):
	lines = s.splitlines()
	lines = [
			(('%5d ' % len(list(g)))) + k
			for k, g in itertools.groupby(lines)
	]
	return '\n'.join(lines)


def __filter(s, cutaway, filename_parts):
	for ns in remove_namespaces:
		s = s.replace(ns + '::', '')
	s = bracedepth(s, cutaway, '<>')
	s = bracedepth(s, 0, '[]')
	s = shorten_filenames(s, filename_parts)
	#s = highlight_errors(s)
	s = highlight_words(s)
	#s = compress(s)
	return s


def filter(s, options):
	for ns in options.strip_namespaces:
		s = s.replace(ns + '::', '')
		
	if options.strip_instantiated:
		s = '\n'.join((line for line in s.splitlines() if 'instantiated from' not in line and 'required from' not in line))
		
	if options.only_errors:
		s = '\n'.join((line for line in s.splitlines() if 'error' in line))
		
	s = bracedepth(s, options.strip_template_args, '<>')
	s = bracedepth(s, options.strip_aka, '[]')
	s = shorten_filenames(s, options.shorten_filenames)
	if options.colorize:
		s = highlight_words(s)
	return s

def parse_options():
	WISELIB_OPTIONS = "-n wiselib -n std -f 2 -c"
	
	parser = OptionParser()
	parser.add_option("-w", "--wiselib", action="store_true", default=False, dest="wiselib", help="equivalent to " + WISELIB_OPTIONS)
	parser.add_option("-n", "--strip-namespace", dest="strip_namespaces", action="append", metavar="NAMESPACE", default=[])
	parser.add_option("-t", "--strip-template-args", dest="strip_template_args", help="depth, 0 to turn off", metavar="DEPTH", default=100, type="int")
	parser.add_option("-a", "--strip-aka", dest="strip_aka", help="depth of [...] explanations, 0 to turn off", metavar="DEPTH", default=100, type="int")
	parser.add_option("-f", "--shorten-filenames", dest="shorten_filenames", help="shorten filenames to this many components", type="int", default=100)
	parser.add_option("-c", "--colorize", dest="colorize", action="store_true", default=False)
	parser.add_option("-i", "--strip-instantiated", help="strip 'instantiated from' lines et al.", action="store_true", default=False, dest="strip_instantiated")
	parser.add_option("-e", "--only-errors", help="only output lines with the word 'error' in them", action="store_true", default=False, dest="only_errors")
	
	options, args = parser.parse_args()
	if options.wiselib:
		new_options, args = parser.parse_args(args = WISELIB_OPTIONS.split(), values = options)
		#new_options.update(options)
		
	return options, args


if __name__ == '__main__':
	#print filter(sys.stdin.read(), depth, filename_parts)
	options, args = parse_options()
	print filter(sys.stdin.read(), options)

# vim: set ts=3 sw=3 tw=78 noexpandtab :
