namespace concepts
{

/**
 * \brief Basic Concept for Join Decision Modules
 *
 * The Join Decision Component (JD) is used to decide which cluster a node
 * should join based on selected parameters given by the user. By examining
 * many clustering algorithms we can identify some generic modules that use
 * selected parameters to achieve this. Such modules can be the Bfs , the
 * Maxmind , or the Moca where the difference is how the advertisement
 * messages of the cluster heads are distributed throughout the network and
 * how the modules join a cluster or not to form simple or even overlapping
 * clusters (as it happens with the Moca Algorithm).
 * 
 * As some algorithms make some simple decisions to join a cluster as the
 * cluster with the minimum id , or the cluster with the minimum power
 * requirements for communication the generic modules can be very usefull
 * while designing new algorithms.
 * 
 * @ingroup jd_concept
 * @ingroup algorithm_concepts
 * @ingroup concepts
 */
class JoinDecision_concept{
    public:
	typedef ... OsModel;
	
	// os modules
	typedef ... Radio;
	typedef ... Debug;

	typedef ... self_type;

	typedef ... node_id_t;
	typedef ... size_t;
	typedef ... block_data_t;
	typedef ... cluster_id_t;

	/** Initialize module and pass pointers to the os modules.
	*/
	void init();

	/** Pass any parameters needed by the module.
	*/
	void set_parameter1(uint8_t param1);

	/** Returns the id of the cluster that was joined.
	*/
	cluster_id_t cluster_id();
	/** Returns the distance from the cluster head.
	*/
	uint8_t hops();

	/** Resets module to prepare it to run the algorithm.
	*/
	void reset();
	
	/** Decides based on an advertisment payload whether to join the cluster or not and returns the decision.
	*/
	bool join(uint8_t *payload, uint8_t length);

	/** Generates a new payload to be sent from the JD module.
	*/
	MsgType get_payload();

};

}
