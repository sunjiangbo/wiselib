#include "basic_algorithm.h"
#include "request.h"
#include "state.h"
#include "state_callback.h"

namespace concepts
{

/**
 * \brief Basic Concept for Node Distance Estimation Algorithms
 *
 * The distance algorithm calculates distances to nodes in the network. Whether only single hop or multi hop depends on the implementation. A distance can be asked for with the operator()(node_id_t) - if not known, UNKNOWN_DISTANCE is returned.
 *
 * Since distances may also be unknown or not yet calculated, the distance algorithm also implements State or State Callback to indicate whether at least distance is available (state must be READY). The concrete implementation (state or state callback) is implementation dependent, and must be given in documentation. Of course, a model may implement both state and state callback.
 * 
 * @ingroup node_distance_estimation_concept
 * @ingroup algorithm_concepts
 * @ingroup concepts
 */
class NodeDistanceEstimation_concept
    : public BasicAlgorithm_concept, public State_concept, public StateCallback_concept
{
   public:
      typedef ... distance_t; ///< Define distance type.
      typedef ... node_id_t; ///< Define type of node ids - usually taken from \ref radio_concept "Radio".

      enum State {
	  READY, ///< Ready for returning a value.
	  NO_VALUE, ///< There is no value available.
	  INACTIVE, ///< Not yet enabled - implementation is inactive and cannot return meaningful values.
	  OK, ///< Only State Callback. When callback registration was successful.
	  FAILED ///< Only State Callback. When callback registration failed.
      };

      /** Reset algorithm. Known position (if so) is lost, state is set back to NO_VALUE.
      */
      int init();
      /** Turn off algorithm. State is set to INACTIVE.
      */
      int destruct();
      /** Return current position.
      */
      value_t operator()();
      /** Only State. Return current state - can either be READY, NO_VALUE, or INACTIVE.
      */
      int state();
      /** Only State Callback. Register state changed callback function - method signature must be void RCV_METHOD_NAME(int state). Returns either OK or FAILED.
      */
      int register_state_callback(T *obj_pnt );	
};

}
