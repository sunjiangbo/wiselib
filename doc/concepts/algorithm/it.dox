namespace concepts
{

/**
 * \brief Basic Concept for Join Decision Modules
 *
 * The Iterator Component (IT) is used to maintain information about the
 * node's cluster and neighborhood. The IT is usually simple in design and
 * similar to most algorithms with the main difference to be the existence
 * of Simple (the NormalIterator module) or Overlapping clusters (the
 * Overlapping Iterator module). 
 * 
 * Finally the IT offers some payloads that can be used to inform other
 * nodes or the cluster heads of the nodes final decision for the cluster
 * joined.
 * 
 * @ingroup jd_concept
 * @ingroup algorithm_concepts
 * @ingroup concepts
 */
class JoinDecision_concept{
    public:
	typedef ... OsModel;
	
	// os modules
	typedef ... Radio;
	typedef ... Debug;

	typedef ... self_type;

	typedef ... node_id_t;
	typedef ... size_t;
	typedef ... block_data_t;
	typedef ... cluster_id_t;

	/** Initialize module and pass pointers to the os modules.
	*/
	void init();

	/** Returns the id of the cluster that was joined.
	*/
	cluster_id_t cluster_id();
	/** Returns the distance from the cluster head.
	*/
	int hops();

	/** Resets module to prepare it to run the algorithm.
	*/
	void reset();
	
	/** Generates a new payload to be sent from the JD module.
	*/
	MsgType get_payload();

	/** Set the parent node in the cluster.
	*/
	void set_parent(node_id_t parent);
	/** Set the cluster id of the node.
	*/
	void set_cluster_id(cluster_id_t cluster_id);
	/** Set the type of the node that can be HEAD, SIMPLE, GATEWAY or UNCLUSTERED.
	*/
	void set_node_type(int node_type);
	/** Set the hop distance form cluster head.
	*/
	void set_hops(int hops);
	/** Set the any_joined condition to false. Means that no nodes joined the cluster under this node.
	*/
	void clear_any_joined();
	/** Set the any_joined condition to true.Means that at least on node joined under the selected node.
	*/
	void did_joined();

	/** Returns the id of the parent node.
	*/
	node_id_t parent();
	/** Returns the type of the node inside the cluster.
	*/
	int node_type();
	/** Returns true if any nodes joined as children under the selected node.
	*/
	bool any_joined();

	/** Add the node as a cluster neighbor.
	*/
	void node_joined(node_id_t node);
	/** Add the node as non-cluster neighbor.
	*/
	void node_not_joined(node_id_t node);
	/** Remove the node from all structs (possibly because contact was lost).
	*/
	void drop_node(node_id_t node);

	/** Return the number of known nodes inside the cluster (type=1) or outside the cluster(type=0).
	*/
	int node_count(int type);
	/** Copy to the list the ids of all cluster nodes.
	*/
	void children(node_id_t *list);

};

}
