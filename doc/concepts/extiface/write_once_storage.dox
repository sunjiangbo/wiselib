
namespace concepts {

/**
 * Interface to data storage that only allows one sort of bit changes (i.e.
 * either 1->0 or 0->1).
 */
class WriteOnceStorage {
	public:
		typedef ... block_data_t;
		typedef ... size_type;
		typedef ... self_type;
		typedef ... address_t;
		
		enum {
			PREFERRED_BLOCK_SIZE = ...,
			SIZE = ...,
			WRITE_TYPE = ..., // 1 -> writes 1's on 0 initialized storage, 0 -> the other way around
			
			/// Optional
			ERASE_BLOCK_SIZE = ...
		};
		
		enum {
			SUCCESS = ...,
			ERR_UNSPEC = ...
		};
		
		/**
		 * Read "size" bytes into "buffer" starting from address "start".
		 * Return the error state.
		 */
		int read(block_data_t* buffer, address_t start, size_type size);
		
		/**
		 * Write "size" bytes from "buffer" to address "start".
		 * Return the error state.
		 */
		int write(block_data_t* buffer, address_t start, size_type size);
		
		/**
		 * Optional:
		 * Erase "count" blocks of size ERASE_BLOCK_SIZE (see above) starting
		 * from block number "start".
		 * Note: "start" is *not* an address but a block number, the
		 * corresponding address is usually ERASE_BLOCK_SIZE * "start".
		 */
		int erase(size_type start, size_type count);
};

} // namespace

// vim: set ft=cpp:
