///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, Institute of Telematics, University of Luebeck                                                //
// All rights reserved.                                                                                              //
//                                                                                                                   //
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the  //
// following conditions are met:                                                                                     //
//                                                                                                                   //
// - Redistributions of source code must retain the above copyright notice, this list of conditions and the following//
//   disclaimer.                                                                                                     //
// - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the       //
//   following disclaimer in the documentation and/or other materials provided with the distribution.                //
// - Neither the name of the University of Luebeck nor the names of its contributors may be used to endorse or       //
//   promote products derived from this software without specific prior written permission.                          //
//                                                                                                                   //
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,//
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE     //
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,        //
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE//
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   //
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  //
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package de.uniluebeck.itm.tr.runtime.wsnapp;
option java_multiple_files = false;

// ==== Listener Messages ====
message ListenerManagement {

	enum Operation {
	    REGISTER = 1;
	    UNREGISTER = 2;
	}

	required Operation operation = 1;
	required string nodeName = 2; 

}



// ==== asynchronous RequestStatus ====
message RequestStatus {

    message Status {
        required string nodeId = 1;
        optional int32 value = 2;
        optional string msg = 3;
    }

    required Status status = 1;
    
}



// ==== flashPrograms ===
message Program {

    message ProgramMetaData{
        required string version = 1;
        required string name = 2;
        required string platform = 3;
        required string other = 4;
    }

	required bytes program = 1;
	optional ProgramMetaData metaData = 2;

}


// ==== receiveNotification ====
message Notification {
	required string message = 1;
}


// ==== send ====
message Message {
    required string sourceNodeId = 1;
    required string timestamp = 2;
    required bytes binaryData = 3;
}


// ==== setVirtualLink ====
message SetVirtualLinkRequest {
	required string sourceNode = 1;
	required string targetNode = 2;
}


// ==== destroyVirtualLink ====
message DestroyVirtualLinkRequest {
    required string sourceNode = 1;
    required string targetNode = 2;
}


// === disablePhysicalLink ===
message DisablePhysicalLink {
	required string nodeB = 2;
}


// === enablePhysicalLink ===
message EnablePhysicalLink {
	required string nodeB = 2;
}



// ==== operation invocation ====
message OperationInvocation {

    enum Operation {

         SEND = 0;
         ARE_NODES_ALIVE = 1;
         FLASH_PROGRAMS = 2;
         RESET_NODES = 3;
         SET_VIRTUAL_LINK = 4;
		 DESTROY_VIRTUAL_LINK = 5;
         DISABLE_NODE = 6;
         ENABLE_NODE = 7;
         DISABLE_PHYSICAL_LINK = 8;
         ENABLE_PHYSICAL_LINK = 9;

    }

    required Operation operation = 1;
    optional bytes arguments = 2;

}
