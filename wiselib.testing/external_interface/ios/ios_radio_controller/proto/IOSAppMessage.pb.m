// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IOSAppMessage.pb.h"

@implementation IOSAppMessageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [IOSAppMessageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Envelope ()
@property Envelope_MsgType msgType;
@property uint32_t source;
@property uint32_t destination;
@property (retain) LoginMessage* loginMessage;
@property (retain) PBAppendableArray * sensorMessageArray;
@end

@implementation Envelope

- (BOOL) hasMsgType {
  return !!hasMsgType_;
}
- (void) setHasMsgType:(BOOL) value {
  hasMsgType_ = !!value;
}
@synthesize msgType;
- (BOOL) hasSource {
  return !!hasSource_;
}
- (void) setHasSource:(BOOL) value {
  hasSource_ = !!value;
}
@synthesize source;
- (BOOL) hasDestination {
  return !!hasDestination_;
}
- (void) setHasDestination:(BOOL) value {
  hasDestination_ = !!value;
}
@synthesize destination;
- (BOOL) hasLoginMessage {
  return !!hasLoginMessage_;
}
- (void) setHasLoginMessage:(BOOL) value {
  hasLoginMessage_ = !!value;
}
@synthesize loginMessage;
@synthesize sensorMessageArray;
@dynamic sensorMessage;
- (void) dealloc {
  self.loginMessage = nil;
  self.sensorMessageArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.msgType = Envelope_MsgTypeLogin;
    self.source = 0;
    self.destination = 0;
    self.loginMessage = [LoginMessage defaultInstance];
  }
  return self;
}
static Envelope* defaultEnvelopeInstance = nil;
+ (void) initialize {
  if (self == [Envelope class]) {
    defaultEnvelopeInstance = [[Envelope alloc] init];
  }
}
+ (Envelope*) defaultInstance {
  return defaultEnvelopeInstance;
}
- (Envelope*) defaultInstance {
  return defaultEnvelopeInstance;
}
- (PBArray *)sensorMessage {
  return sensorMessageArray;
}
- (SensorMessage*)sensorMessageAtIndex:(NSUInteger)index {
  return [sensorMessageArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasMsgType) {
    return NO;
  }
  for (SensorMessage* element in self.sensorMessage) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMsgType) {
    [output writeEnum:1 value:self.msgType];
  }
  if (self.hasSource) {
    [output writeUInt32:2 value:self.source];
  }
  if (self.hasDestination) {
    [output writeUInt32:3 value:self.destination];
  }
  if (self.hasLoginMessage) {
    [output writeMessage:4 value:self.loginMessage];
  }
  for (SensorMessage *element in self.sensorMessageArray) {
    [output writeMessage:5 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasMsgType) {
    size += computeEnumSize(1, self.msgType);
  }
  if (self.hasSource) {
    size += computeUInt32Size(2, self.source);
  }
  if (self.hasDestination) {
    size += computeUInt32Size(3, self.destination);
  }
  if (self.hasLoginMessage) {
    size += computeMessageSize(4, self.loginMessage);
  }
  for (SensorMessage *element in self.sensorMessageArray) {
    size += computeMessageSize(5, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Envelope*) parseFromData:(NSData*) data {
  return (Envelope*)[[[Envelope builder] mergeFromData:data] build];
}
+ (Envelope*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Envelope*)[[[Envelope builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Envelope*) parseFromInputStream:(NSInputStream*) input {
  return (Envelope*)[[[Envelope builder] mergeFromInputStream:input] build];
}
+ (Envelope*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Envelope*)[[[Envelope builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Envelope*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Envelope*)[[[Envelope builder] mergeFromCodedInputStream:input] build];
}
+ (Envelope*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Envelope*)[[[Envelope builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Envelope_Builder*) builder {
  return [[[Envelope_Builder alloc] init] autorelease];
}
+ (Envelope_Builder*) builderWithPrototype:(Envelope*) prototype {
  return [[Envelope builder] mergeFrom:prototype];
}
- (Envelope_Builder*) builder {
  return [Envelope builder];
}
@end

BOOL Envelope_MsgTypeIsValidValue(Envelope_MsgType value) {
  switch (value) {
    case Envelope_MsgTypeLogin:
    case Envelope_MsgTypeListenerEvent:
    case Envelope_MsgTypeOperationInvocationRequest:
      return YES;
    default:
      return NO;
  }
}
@interface Envelope_Builder()
@property (retain) Envelope* result;
@end

@implementation Envelope_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Envelope alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Envelope_Builder*) clear {
  self.result = [[[Envelope alloc] init] autorelease];
  return self;
}
- (Envelope_Builder*) clone {
  return [Envelope builderWithPrototype:result];
}
- (Envelope*) defaultInstance {
  return [Envelope defaultInstance];
}
- (Envelope*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Envelope*) buildPartial {
  Envelope* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Envelope_Builder*) mergeFrom:(Envelope*) other {
  if (other == [Envelope defaultInstance]) {
    return self;
  }
  if (other.hasMsgType) {
    [self setMsgType:other.msgType];
  }
  if (other.hasSource) {
    [self setSource:other.source];
  }
  if (other.hasDestination) {
    [self setDestination:other.destination];
  }
  if (other.hasLoginMessage) {
    [self mergeLoginMessage:other.loginMessage];
  }
  if (other.sensorMessageArray.count > 0) {
    if (result.sensorMessageArray == nil) {
      result.sensorMessageArray = [other.sensorMessageArray copyWithZone:[other.sensorMessageArray zone]];
    } else {
      [result.sensorMessageArray appendArray:other.sensorMessageArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Envelope_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Envelope_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (Envelope_MsgTypeIsValidValue(value)) {
          [self setMsgType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setSource:[input readUInt32]];
        break;
      }
      case 24: {
        [self setDestination:[input readUInt32]];
        break;
      }
      case 34: {
        LoginMessage_Builder* subBuilder = [LoginMessage builder];
        if (self.hasLoginMessage) {
          [subBuilder mergeFrom:self.loginMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLoginMessage:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        SensorMessage_Builder* subBuilder = [SensorMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSensorMessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasMsgType {
  return result.hasMsgType;
}
- (Envelope_MsgType) msgType {
  return result.msgType;
}
- (Envelope_Builder*) setMsgType:(Envelope_MsgType) value {
  result.hasMsgType = YES;
  result.msgType = value;
  return self;
}
- (Envelope_Builder*) clearMsgType {
  result.hasMsgType = NO;
  result.msgType = Envelope_MsgTypeLogin;
  return self;
}
- (BOOL) hasSource {
  return result.hasSource;
}
- (uint32_t) source {
  return result.source;
}
- (Envelope_Builder*) setSource:(uint32_t) value {
  result.hasSource = YES;
  result.source = value;
  return self;
}
- (Envelope_Builder*) clearSource {
  result.hasSource = NO;
  result.source = 0;
  return self;
}
- (BOOL) hasDestination {
  return result.hasDestination;
}
- (uint32_t) destination {
  return result.destination;
}
- (Envelope_Builder*) setDestination:(uint32_t) value {
  result.hasDestination = YES;
  result.destination = value;
  return self;
}
- (Envelope_Builder*) clearDestination {
  result.hasDestination = NO;
  result.destination = 0;
  return self;
}
- (BOOL) hasLoginMessage {
  return result.hasLoginMessage;
}
- (LoginMessage*) loginMessage {
  return result.loginMessage;
}
- (Envelope_Builder*) setLoginMessage:(LoginMessage*) value {
  result.hasLoginMessage = YES;
  result.loginMessage = value;
  return self;
}
- (Envelope_Builder*) setLoginMessageBuilder:(LoginMessage_Builder*) builderForValue {
  return [self setLoginMessage:[builderForValue build]];
}
- (Envelope_Builder*) mergeLoginMessage:(LoginMessage*) value {
  if (result.hasLoginMessage &&
      result.loginMessage != [LoginMessage defaultInstance]) {
    result.loginMessage =
      [[[LoginMessage builderWithPrototype:result.loginMessage] mergeFrom:value] buildPartial];
  } else {
    result.loginMessage = value;
  }
  result.hasLoginMessage = YES;
  return self;
}
- (Envelope_Builder*) clearLoginMessage {
  result.hasLoginMessage = NO;
  result.loginMessage = [LoginMessage defaultInstance];
  return self;
}
- (PBAppendableArray *)sensorMessage {
  return result.sensorMessageArray;
}
- (SensorMessage*)sensorMessageAtIndex:(NSUInteger)index {
  return [result sensorMessageAtIndex:index];
}
- (Envelope_Builder *)addSensorMessage:(SensorMessage*)value {
  if (result.sensorMessageArray == nil) {
    result.sensorMessageArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.sensorMessageArray addObject:value];
  return self;
}
- (Envelope_Builder *)setSensorMessageArray:(NSArray *)array {
  result.sensorMessageArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Envelope_Builder *)setSensorMessageValues:(const SensorMessage* *)values count:(NSUInteger)count {
  result.sensorMessageArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Envelope_Builder *)clearSensorMessage {
  result.sensorMessageArray = nil;
  return self;
}
@end

@interface LoginMessage ()
@property BOOL login;
@property (retain) NSString* user;
@property (retain) NSString* pwd;
@property uint32_t deviseId;
@end

@implementation LoginMessage

- (BOOL) hasLogin {
  return !!hasLogin_;
}
- (void) setHasLogin:(BOOL) value {
  hasLogin_ = !!value;
}
- (BOOL) login {
  return !!login_;
}
- (void) setLogin:(BOOL) value {
  login_ = !!value;
}
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value {
  hasUser_ = !!value;
}
@synthesize user;
- (BOOL) hasPwd {
  return !!hasPwd_;
}
- (void) setHasPwd:(BOOL) value {
  hasPwd_ = !!value;
}
@synthesize pwd;
- (BOOL) hasDeviseId {
  return !!hasDeviseId_;
}
- (void) setHasDeviseId:(BOOL) value {
  hasDeviseId_ = !!value;
}
@synthesize deviseId;
- (void) dealloc {
  self.user = nil;
  self.pwd = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.login = NO;
    self.user = @"";
    self.pwd = @"";
    self.deviseId = 0;
  }
  return self;
}
static LoginMessage* defaultLoginMessageInstance = nil;
+ (void) initialize {
  if (self == [LoginMessage class]) {
    defaultLoginMessageInstance = [[LoginMessage alloc] init];
  }
}
+ (LoginMessage*) defaultInstance {
  return defaultLoginMessageInstance;
}
- (LoginMessage*) defaultInstance {
  return defaultLoginMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLogin) {
    [output writeBool:1 value:self.login];
  }
  if (self.hasUser) {
    [output writeString:2 value:self.user];
  }
  if (self.hasPwd) {
    [output writeString:3 value:self.pwd];
  }
  if (self.hasDeviseId) {
    [output writeUInt32:4 value:self.deviseId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasLogin) {
    size += computeBoolSize(1, self.login);
  }
  if (self.hasUser) {
    size += computeStringSize(2, self.user);
  }
  if (self.hasPwd) {
    size += computeStringSize(3, self.pwd);
  }
  if (self.hasDeviseId) {
    size += computeUInt32Size(4, self.deviseId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (LoginMessage*) parseFromData:(NSData*) data {
  return (LoginMessage*)[[[LoginMessage builder] mergeFromData:data] build];
}
+ (LoginMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginMessage*)[[[LoginMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LoginMessage*) parseFromInputStream:(NSInputStream*) input {
  return (LoginMessage*)[[[LoginMessage builder] mergeFromInputStream:input] build];
}
+ (LoginMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginMessage*)[[[LoginMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LoginMessage*)[[[LoginMessage builder] mergeFromCodedInputStream:input] build];
}
+ (LoginMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginMessage*)[[[LoginMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginMessage_Builder*) builder {
  return [[[LoginMessage_Builder alloc] init] autorelease];
}
+ (LoginMessage_Builder*) builderWithPrototype:(LoginMessage*) prototype {
  return [[LoginMessage builder] mergeFrom:prototype];
}
- (LoginMessage_Builder*) builder {
  return [LoginMessage builder];
}
@end

@interface LoginMessage_Builder()
@property (retain) LoginMessage* result;
@end

@implementation LoginMessage_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[LoginMessage alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LoginMessage_Builder*) clear {
  self.result = [[[LoginMessage alloc] init] autorelease];
  return self;
}
- (LoginMessage_Builder*) clone {
  return [LoginMessage builderWithPrototype:result];
}
- (LoginMessage*) defaultInstance {
  return [LoginMessage defaultInstance];
}
- (LoginMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LoginMessage*) buildPartial {
  LoginMessage* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (LoginMessage_Builder*) mergeFrom:(LoginMessage*) other {
  if (other == [LoginMessage defaultInstance]) {
    return self;
  }
  if (other.hasLogin) {
    [self setLogin:other.login];
  }
  if (other.hasUser) {
    [self setUser:other.user];
  }
  if (other.hasPwd) {
    [self setPwd:other.pwd];
  }
  if (other.hasDeviseId) {
    [self setDeviseId:other.deviseId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LoginMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LoginMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLogin:[input readBool]];
        break;
      }
      case 18: {
        [self setUser:[input readString]];
        break;
      }
      case 26: {
        [self setPwd:[input readString]];
        break;
      }
      case 32: {
        [self setDeviseId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasLogin {
  return result.hasLogin;
}
- (BOOL) login {
  return result.login;
}
- (LoginMessage_Builder*) setLogin:(BOOL) value {
  result.hasLogin = YES;
  result.login = value;
  return self;
}
- (LoginMessage_Builder*) clearLogin {
  result.hasLogin = NO;
  result.login = NO;
  return self;
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (NSString*) user {
  return result.user;
}
- (LoginMessage_Builder*) setUser:(NSString*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (LoginMessage_Builder*) clearUser {
  result.hasUser = NO;
  result.user = @"";
  return self;
}
- (BOOL) hasPwd {
  return result.hasPwd;
}
- (NSString*) pwd {
  return result.pwd;
}
- (LoginMessage_Builder*) setPwd:(NSString*) value {
  result.hasPwd = YES;
  result.pwd = value;
  return self;
}
- (LoginMessage_Builder*) clearPwd {
  result.hasPwd = NO;
  result.pwd = @"";
  return self;
}
- (BOOL) hasDeviseId {
  return result.hasDeviseId;
}
- (uint32_t) deviseId {
  return result.deviseId;
}
- (LoginMessage_Builder*) setDeviseId:(uint32_t) value {
  result.hasDeviseId = YES;
  result.deviseId = value;
  return self;
}
- (LoginMessage_Builder*) clearDeviseId {
  result.hasDeviseId = NO;
  result.deviseId = 0;
  return self;
}
@end

@interface SensorMessage ()
@property SensorMessage_MsgType msgType;
@property uint32_t id;
@property uint64_t timestamp;
@property (retain) LedColor* ledColor;
@property (retain) LedTemperature* ledTemperature;
@property (retain) PBAppendableArray * dmsUpdateArray;
@property (retain) DmsLoaded* dmsLoaded;
@property (retain) TileLoaded* tileLoaded;
@property (retain) Custom* custom;
@end

@implementation SensorMessage

- (BOOL) hasMsgType {
  return !!hasMsgType_;
}
- (void) setHasMsgType:(BOOL) value {
  hasMsgType_ = !!value;
}
@synthesize msgType;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) value {
  hasTimestamp_ = !!value;
}
@synthesize timestamp;
- (BOOL) hasLedColor {
  return !!hasLedColor_;
}
- (void) setHasLedColor:(BOOL) value {
  hasLedColor_ = !!value;
}
@synthesize ledColor;
- (BOOL) hasLedTemperature {
  return !!hasLedTemperature_;
}
- (void) setHasLedTemperature:(BOOL) value {
  hasLedTemperature_ = !!value;
}
@synthesize ledTemperature;
@synthesize dmsUpdateArray;
@dynamic dmsUpdate;
- (BOOL) hasDmsLoaded {
  return !!hasDmsLoaded_;
}
- (void) setHasDmsLoaded:(BOOL) value {
  hasDmsLoaded_ = !!value;
}
@synthesize dmsLoaded;
- (BOOL) hasTileLoaded {
  return !!hasTileLoaded_;
}
- (void) setHasTileLoaded:(BOOL) value {
  hasTileLoaded_ = !!value;
}
@synthesize tileLoaded;
- (BOOL) hasCustom {
  return !!hasCustom_;
}
- (void) setHasCustom:(BOOL) value {
  hasCustom_ = !!value;
}
@synthesize custom;
- (void) dealloc {
  self.ledColor = nil;
  self.ledTemperature = nil;
  self.dmsUpdateArray = nil;
  self.dmsLoaded = nil;
  self.tileLoaded = nil;
  self.custom = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.msgType = SensorMessage_MsgTypeLedUpdate;
    self.id = 0;
    self.timestamp = 0L;
    self.ledColor = [LedColor defaultInstance];
    self.ledTemperature = [LedTemperature defaultInstance];
    self.dmsLoaded = [DmsLoaded defaultInstance];
    self.tileLoaded = [TileLoaded defaultInstance];
    self.custom = [Custom defaultInstance];
  }
  return self;
}
static SensorMessage* defaultSensorMessageInstance = nil;
+ (void) initialize {
  if (self == [SensorMessage class]) {
    defaultSensorMessageInstance = [[SensorMessage alloc] init];
  }
}
+ (SensorMessage*) defaultInstance {
  return defaultSensorMessageInstance;
}
- (SensorMessage*) defaultInstance {
  return defaultSensorMessageInstance;
}
- (PBArray *)dmsUpdate {
  return dmsUpdateArray;
}
- (DmsUpdate*)dmsUpdateAtIndex:(NSUInteger)index {
  return [dmsUpdateArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasMsgType) {
    return NO;
  }
  if (!self.hasId) {
    return NO;
  }
  if (self.hasLedColor) {
    if (!self.ledColor.isInitialized) {
      return NO;
    }
  }
  if (self.hasLedTemperature) {
    if (!self.ledTemperature.isInitialized) {
      return NO;
    }
  }
  for (DmsUpdate* element in self.dmsUpdate) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasDmsLoaded) {
    if (!self.dmsLoaded.isInitialized) {
      return NO;
    }
  }
  if (self.hasTileLoaded) {
    if (!self.tileLoaded.isInitialized) {
      return NO;
    }
  }
  if (self.hasCustom) {
    if (!self.custom.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMsgType) {
    [output writeEnum:1 value:self.msgType];
  }
  if (self.hasId) {
    [output writeUInt32:2 value:self.id];
  }
  if (self.hasTimestamp) {
    [output writeUInt64:3 value:self.timestamp];
  }
  if (self.hasLedColor) {
    [output writeMessage:4 value:self.ledColor];
  }
  if (self.hasLedTemperature) {
    [output writeMessage:5 value:self.ledTemperature];
  }
  for (DmsUpdate *element in self.dmsUpdateArray) {
    [output writeMessage:6 value:element];
  }
  if (self.hasDmsLoaded) {
    [output writeMessage:7 value:self.dmsLoaded];
  }
  if (self.hasTileLoaded) {
    [output writeMessage:8 value:self.tileLoaded];
  }
  if (self.hasCustom) {
    [output writeMessage:9 value:self.custom];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasMsgType) {
    size += computeEnumSize(1, self.msgType);
  }
  if (self.hasId) {
    size += computeUInt32Size(2, self.id);
  }
  if (self.hasTimestamp) {
    size += computeUInt64Size(3, self.timestamp);
  }
  if (self.hasLedColor) {
    size += computeMessageSize(4, self.ledColor);
  }
  if (self.hasLedTemperature) {
    size += computeMessageSize(5, self.ledTemperature);
  }
  for (DmsUpdate *element in self.dmsUpdateArray) {
    size += computeMessageSize(6, element);
  }
  if (self.hasDmsLoaded) {
    size += computeMessageSize(7, self.dmsLoaded);
  }
  if (self.hasTileLoaded) {
    size += computeMessageSize(8, self.tileLoaded);
  }
  if (self.hasCustom) {
    size += computeMessageSize(9, self.custom);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SensorMessage*) parseFromData:(NSData*) data {
  return (SensorMessage*)[[[SensorMessage builder] mergeFromData:data] build];
}
+ (SensorMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SensorMessage*)[[[SensorMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SensorMessage*) parseFromInputStream:(NSInputStream*) input {
  return (SensorMessage*)[[[SensorMessage builder] mergeFromInputStream:input] build];
}
+ (SensorMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SensorMessage*)[[[SensorMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SensorMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SensorMessage*)[[[SensorMessage builder] mergeFromCodedInputStream:input] build];
}
+ (SensorMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SensorMessage*)[[[SensorMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SensorMessage_Builder*) builder {
  return [[[SensorMessage_Builder alloc] init] autorelease];
}
+ (SensorMessage_Builder*) builderWithPrototype:(SensorMessage*) prototype {
  return [[SensorMessage builder] mergeFrom:prototype];
}
- (SensorMessage_Builder*) builder {
  return [SensorMessage builder];
}
@end

BOOL SensorMessage_MsgTypeIsValidValue(SensorMessage_MsgType value) {
  switch (value) {
    case SensorMessage_MsgTypeLedUpdate:
    case SensorMessage_MsgTypeLedTemp:
    case SensorMessage_MsgTypeDmsUpdate:
    case SensorMessage_MsgTypeDmsLoaded:
    case SensorMessage_MsgTypeTileLoaded:
    case SensorMessage_MsgTypeCustom:
      return YES;
    default:
      return NO;
  }
}
@interface SensorMessage_Builder()
@property (retain) SensorMessage* result;
@end

@implementation SensorMessage_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SensorMessage alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SensorMessage_Builder*) clear {
  self.result = [[[SensorMessage alloc] init] autorelease];
  return self;
}
- (SensorMessage_Builder*) clone {
  return [SensorMessage builderWithPrototype:result];
}
- (SensorMessage*) defaultInstance {
  return [SensorMessage defaultInstance];
}
- (SensorMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SensorMessage*) buildPartial {
  SensorMessage* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SensorMessage_Builder*) mergeFrom:(SensorMessage*) other {
  if (other == [SensorMessage defaultInstance]) {
    return self;
  }
  if (other.hasMsgType) {
    [self setMsgType:other.msgType];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasLedColor) {
    [self mergeLedColor:other.ledColor];
  }
  if (other.hasLedTemperature) {
    [self mergeLedTemperature:other.ledTemperature];
  }
  if (other.dmsUpdateArray.count > 0) {
    if (result.dmsUpdateArray == nil) {
      result.dmsUpdateArray = [other.dmsUpdateArray copyWithZone:[other.dmsUpdateArray zone]];
    } else {
      [result.dmsUpdateArray appendArray:other.dmsUpdateArray];
    }
  }
  if (other.hasDmsLoaded) {
    [self mergeDmsLoaded:other.dmsLoaded];
  }
  if (other.hasTileLoaded) {
    [self mergeTileLoaded:other.tileLoaded];
  }
  if (other.hasCustom) {
    [self mergeCustom:other.custom];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SensorMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SensorMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (SensorMessage_MsgTypeIsValidValue(value)) {
          [self setMsgType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setTimestamp:[input readUInt64]];
        break;
      }
      case 34: {
        LedColor_Builder* subBuilder = [LedColor builder];
        if (self.hasLedColor) {
          [subBuilder mergeFrom:self.ledColor];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLedColor:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        LedTemperature_Builder* subBuilder = [LedTemperature builder];
        if (self.hasLedTemperature) {
          [subBuilder mergeFrom:self.ledTemperature];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLedTemperature:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        DmsUpdate_Builder* subBuilder = [DmsUpdate builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDmsUpdate:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        DmsLoaded_Builder* subBuilder = [DmsLoaded builder];
        if (self.hasDmsLoaded) {
          [subBuilder mergeFrom:self.dmsLoaded];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDmsLoaded:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        TileLoaded_Builder* subBuilder = [TileLoaded builder];
        if (self.hasTileLoaded) {
          [subBuilder mergeFrom:self.tileLoaded];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTileLoaded:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        Custom_Builder* subBuilder = [Custom builder];
        if (self.hasCustom) {
          [subBuilder mergeFrom:self.custom];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCustom:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasMsgType {
  return result.hasMsgType;
}
- (SensorMessage_MsgType) msgType {
  return result.msgType;
}
- (SensorMessage_Builder*) setMsgType:(SensorMessage_MsgType) value {
  result.hasMsgType = YES;
  result.msgType = value;
  return self;
}
- (SensorMessage_Builder*) clearMsgType {
  result.hasMsgType = NO;
  result.msgType = SensorMessage_MsgTypeLedUpdate;
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (uint32_t) id {
  return result.id;
}
- (SensorMessage_Builder*) setId:(uint32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (SensorMessage_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasTimestamp {
  return result.hasTimestamp;
}
- (uint64_t) timestamp {
  return result.timestamp;
}
- (SensorMessage_Builder*) setTimestamp:(uint64_t) value {
  result.hasTimestamp = YES;
  result.timestamp = value;
  return self;
}
- (SensorMessage_Builder*) clearTimestamp {
  result.hasTimestamp = NO;
  result.timestamp = 0L;
  return self;
}
- (BOOL) hasLedColor {
  return result.hasLedColor;
}
- (LedColor*) ledColor {
  return result.ledColor;
}
- (SensorMessage_Builder*) setLedColor:(LedColor*) value {
  result.hasLedColor = YES;
  result.ledColor = value;
  return self;
}
- (SensorMessage_Builder*) setLedColorBuilder:(LedColor_Builder*) builderForValue {
  return [self setLedColor:[builderForValue build]];
}
- (SensorMessage_Builder*) mergeLedColor:(LedColor*) value {
  if (result.hasLedColor &&
      result.ledColor != [LedColor defaultInstance]) {
    result.ledColor =
      [[[LedColor builderWithPrototype:result.ledColor] mergeFrom:value] buildPartial];
  } else {
    result.ledColor = value;
  }
  result.hasLedColor = YES;
  return self;
}
- (SensorMessage_Builder*) clearLedColor {
  result.hasLedColor = NO;
  result.ledColor = [LedColor defaultInstance];
  return self;
}
- (BOOL) hasLedTemperature {
  return result.hasLedTemperature;
}
- (LedTemperature*) ledTemperature {
  return result.ledTemperature;
}
- (SensorMessage_Builder*) setLedTemperature:(LedTemperature*) value {
  result.hasLedTemperature = YES;
  result.ledTemperature = value;
  return self;
}
- (SensorMessage_Builder*) setLedTemperatureBuilder:(LedTemperature_Builder*) builderForValue {
  return [self setLedTemperature:[builderForValue build]];
}
- (SensorMessage_Builder*) mergeLedTemperature:(LedTemperature*) value {
  if (result.hasLedTemperature &&
      result.ledTemperature != [LedTemperature defaultInstance]) {
    result.ledTemperature =
      [[[LedTemperature builderWithPrototype:result.ledTemperature] mergeFrom:value] buildPartial];
  } else {
    result.ledTemperature = value;
  }
  result.hasLedTemperature = YES;
  return self;
}
- (SensorMessage_Builder*) clearLedTemperature {
  result.hasLedTemperature = NO;
  result.ledTemperature = [LedTemperature defaultInstance];
  return self;
}
- (PBAppendableArray *)dmsUpdate {
  return result.dmsUpdateArray;
}
- (DmsUpdate*)dmsUpdateAtIndex:(NSUInteger)index {
  return [result dmsUpdateAtIndex:index];
}
- (SensorMessage_Builder *)addDmsUpdate:(DmsUpdate*)value {
  if (result.dmsUpdateArray == nil) {
    result.dmsUpdateArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.dmsUpdateArray addObject:value];
  return self;
}
- (SensorMessage_Builder *)setDmsUpdateArray:(NSArray *)array {
  result.dmsUpdateArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (SensorMessage_Builder *)setDmsUpdateValues:(const DmsUpdate* *)values count:(NSUInteger)count {
  result.dmsUpdateArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (SensorMessage_Builder *)clearDmsUpdate {
  result.dmsUpdateArray = nil;
  return self;
}
- (BOOL) hasDmsLoaded {
  return result.hasDmsLoaded;
}
- (DmsLoaded*) dmsLoaded {
  return result.dmsLoaded;
}
- (SensorMessage_Builder*) setDmsLoaded:(DmsLoaded*) value {
  result.hasDmsLoaded = YES;
  result.dmsLoaded = value;
  return self;
}
- (SensorMessage_Builder*) setDmsLoadedBuilder:(DmsLoaded_Builder*) builderForValue {
  return [self setDmsLoaded:[builderForValue build]];
}
- (SensorMessage_Builder*) mergeDmsLoaded:(DmsLoaded*) value {
  if (result.hasDmsLoaded &&
      result.dmsLoaded != [DmsLoaded defaultInstance]) {
    result.dmsLoaded =
      [[[DmsLoaded builderWithPrototype:result.dmsLoaded] mergeFrom:value] buildPartial];
  } else {
    result.dmsLoaded = value;
  }
  result.hasDmsLoaded = YES;
  return self;
}
- (SensorMessage_Builder*) clearDmsLoaded {
  result.hasDmsLoaded = NO;
  result.dmsLoaded = [DmsLoaded defaultInstance];
  return self;
}
- (BOOL) hasTileLoaded {
  return result.hasTileLoaded;
}
- (TileLoaded*) tileLoaded {
  return result.tileLoaded;
}
- (SensorMessage_Builder*) setTileLoaded:(TileLoaded*) value {
  result.hasTileLoaded = YES;
  result.tileLoaded = value;
  return self;
}
- (SensorMessage_Builder*) setTileLoadedBuilder:(TileLoaded_Builder*) builderForValue {
  return [self setTileLoaded:[builderForValue build]];
}
- (SensorMessage_Builder*) mergeTileLoaded:(TileLoaded*) value {
  if (result.hasTileLoaded &&
      result.tileLoaded != [TileLoaded defaultInstance]) {
    result.tileLoaded =
      [[[TileLoaded builderWithPrototype:result.tileLoaded] mergeFrom:value] buildPartial];
  } else {
    result.tileLoaded = value;
  }
  result.hasTileLoaded = YES;
  return self;
}
- (SensorMessage_Builder*) clearTileLoaded {
  result.hasTileLoaded = NO;
  result.tileLoaded = [TileLoaded defaultInstance];
  return self;
}
- (BOOL) hasCustom {
  return result.hasCustom;
}
- (Custom*) custom {
  return result.custom;
}
- (SensorMessage_Builder*) setCustom:(Custom*) value {
  result.hasCustom = YES;
  result.custom = value;
  return self;
}
- (SensorMessage_Builder*) setCustomBuilder:(Custom_Builder*) builderForValue {
  return [self setCustom:[builderForValue build]];
}
- (SensorMessage_Builder*) mergeCustom:(Custom*) value {
  if (result.hasCustom &&
      result.custom != [Custom defaultInstance]) {
    result.custom =
      [[[Custom builderWithPrototype:result.custom] mergeFrom:value] buildPartial];
  } else {
    result.custom = value;
  }
  result.hasCustom = YES;
  return self;
}
- (SensorMessage_Builder*) clearCustom {
  result.hasCustom = NO;
  result.custom = [Custom defaultInstance];
  return self;
}
@end

@interface LedColor ()
@property uint32_t red;
@property uint32_t green;
@property uint32_t blue;
@end

@implementation LedColor

- (BOOL) hasRed {
  return !!hasRed_;
}
- (void) setHasRed:(BOOL) value {
  hasRed_ = !!value;
}
@synthesize red;
- (BOOL) hasGreen {
  return !!hasGreen_;
}
- (void) setHasGreen:(BOOL) value {
  hasGreen_ = !!value;
}
@synthesize green;
- (BOOL) hasBlue {
  return !!hasBlue_;
}
- (void) setHasBlue:(BOOL) value {
  hasBlue_ = !!value;
}
@synthesize blue;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.red = 0;
    self.green = 0;
    self.blue = 0;
  }
  return self;
}
static LedColor* defaultLedColorInstance = nil;
+ (void) initialize {
  if (self == [LedColor class]) {
    defaultLedColorInstance = [[LedColor alloc] init];
  }
}
+ (LedColor*) defaultInstance {
  return defaultLedColorInstance;
}
- (LedColor*) defaultInstance {
  return defaultLedColorInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRed) {
    return NO;
  }
  if (!self.hasGreen) {
    return NO;
  }
  if (!self.hasBlue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRed) {
    [output writeUInt32:1 value:self.red];
  }
  if (self.hasGreen) {
    [output writeUInt32:2 value:self.green];
  }
  if (self.hasBlue) {
    [output writeUInt32:3 value:self.blue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasRed) {
    size += computeUInt32Size(1, self.red);
  }
  if (self.hasGreen) {
    size += computeUInt32Size(2, self.green);
  }
  if (self.hasBlue) {
    size += computeUInt32Size(3, self.blue);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (LedColor*) parseFromData:(NSData*) data {
  return (LedColor*)[[[LedColor builder] mergeFromData:data] build];
}
+ (LedColor*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LedColor*)[[[LedColor builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LedColor*) parseFromInputStream:(NSInputStream*) input {
  return (LedColor*)[[[LedColor builder] mergeFromInputStream:input] build];
}
+ (LedColor*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LedColor*)[[[LedColor builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LedColor*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LedColor*)[[[LedColor builder] mergeFromCodedInputStream:input] build];
}
+ (LedColor*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LedColor*)[[[LedColor builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LedColor_Builder*) builder {
  return [[[LedColor_Builder alloc] init] autorelease];
}
+ (LedColor_Builder*) builderWithPrototype:(LedColor*) prototype {
  return [[LedColor builder] mergeFrom:prototype];
}
- (LedColor_Builder*) builder {
  return [LedColor builder];
}
@end

@interface LedColor_Builder()
@property (retain) LedColor* result;
@end

@implementation LedColor_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[LedColor alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LedColor_Builder*) clear {
  self.result = [[[LedColor alloc] init] autorelease];
  return self;
}
- (LedColor_Builder*) clone {
  return [LedColor builderWithPrototype:result];
}
- (LedColor*) defaultInstance {
  return [LedColor defaultInstance];
}
- (LedColor*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LedColor*) buildPartial {
  LedColor* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (LedColor_Builder*) mergeFrom:(LedColor*) other {
  if (other == [LedColor defaultInstance]) {
    return self;
  }
  if (other.hasRed) {
    [self setRed:other.red];
  }
  if (other.hasGreen) {
    [self setGreen:other.green];
  }
  if (other.hasBlue) {
    [self setBlue:other.blue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LedColor_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LedColor_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRed:[input readUInt32]];
        break;
      }
      case 16: {
        [self setGreen:[input readUInt32]];
        break;
      }
      case 24: {
        [self setBlue:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRed {
  return result.hasRed;
}
- (uint32_t) red {
  return result.red;
}
- (LedColor_Builder*) setRed:(uint32_t) value {
  result.hasRed = YES;
  result.red = value;
  return self;
}
- (LedColor_Builder*) clearRed {
  result.hasRed = NO;
  result.red = 0;
  return self;
}
- (BOOL) hasGreen {
  return result.hasGreen;
}
- (uint32_t) green {
  return result.green;
}
- (LedColor_Builder*) setGreen:(uint32_t) value {
  result.hasGreen = YES;
  result.green = value;
  return self;
}
- (LedColor_Builder*) clearGreen {
  result.hasGreen = NO;
  result.green = 0;
  return self;
}
- (BOOL) hasBlue {
  return result.hasBlue;
}
- (uint32_t) blue {
  return result.blue;
}
- (LedColor_Builder*) setBlue:(uint32_t) value {
  result.hasBlue = YES;
  result.blue = value;
  return self;
}
- (LedColor_Builder*) clearBlue {
  result.hasBlue = NO;
  result.blue = 0;
  return self;
}
@end

@interface LedTemperature ()
@property uint32_t temperature;
@end

@implementation LedTemperature

- (BOOL) hasTemperature {
  return !!hasTemperature_;
}
- (void) setHasTemperature:(BOOL) value {
  hasTemperature_ = !!value;
}
@synthesize temperature;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.temperature = 0;
  }
  return self;
}
static LedTemperature* defaultLedTemperatureInstance = nil;
+ (void) initialize {
  if (self == [LedTemperature class]) {
    defaultLedTemperatureInstance = [[LedTemperature alloc] init];
  }
}
+ (LedTemperature*) defaultInstance {
  return defaultLedTemperatureInstance;
}
- (LedTemperature*) defaultInstance {
  return defaultLedTemperatureInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTemperature) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTemperature) {
    [output writeUInt32:1 value:self.temperature];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTemperature) {
    size += computeUInt32Size(1, self.temperature);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (LedTemperature*) parseFromData:(NSData*) data {
  return (LedTemperature*)[[[LedTemperature builder] mergeFromData:data] build];
}
+ (LedTemperature*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LedTemperature*)[[[LedTemperature builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LedTemperature*) parseFromInputStream:(NSInputStream*) input {
  return (LedTemperature*)[[[LedTemperature builder] mergeFromInputStream:input] build];
}
+ (LedTemperature*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LedTemperature*)[[[LedTemperature builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LedTemperature*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LedTemperature*)[[[LedTemperature builder] mergeFromCodedInputStream:input] build];
}
+ (LedTemperature*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LedTemperature*)[[[LedTemperature builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LedTemperature_Builder*) builder {
  return [[[LedTemperature_Builder alloc] init] autorelease];
}
+ (LedTemperature_Builder*) builderWithPrototype:(LedTemperature*) prototype {
  return [[LedTemperature builder] mergeFrom:prototype];
}
- (LedTemperature_Builder*) builder {
  return [LedTemperature builder];
}
@end

@interface LedTemperature_Builder()
@property (retain) LedTemperature* result;
@end

@implementation LedTemperature_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[LedTemperature alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LedTemperature_Builder*) clear {
  self.result = [[[LedTemperature alloc] init] autorelease];
  return self;
}
- (LedTemperature_Builder*) clone {
  return [LedTemperature builderWithPrototype:result];
}
- (LedTemperature*) defaultInstance {
  return [LedTemperature defaultInstance];
}
- (LedTemperature*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LedTemperature*) buildPartial {
  LedTemperature* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (LedTemperature_Builder*) mergeFrom:(LedTemperature*) other {
  if (other == [LedTemperature defaultInstance]) {
    return self;
  }
  if (other.hasTemperature) {
    [self setTemperature:other.temperature];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LedTemperature_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LedTemperature_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTemperature:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTemperature {
  return result.hasTemperature;
}
- (uint32_t) temperature {
  return result.temperature;
}
- (LedTemperature_Builder*) setTemperature:(uint32_t) value {
  result.hasTemperature = YES;
  result.temperature = value;
  return self;
}
- (LedTemperature_Builder*) clearTemperature {
  result.hasTemperature = NO;
  result.temperature = 0;
  return self;
}
@end

@interface DmsUpdate ()
@property uint32_t valueAbs;
@property uint32_t valueRel;
@end

@implementation DmsUpdate

- (BOOL) hasValueAbs {
  return !!hasValueAbs_;
}
- (void) setHasValueAbs:(BOOL) value {
  hasValueAbs_ = !!value;
}
@synthesize valueAbs;
- (BOOL) hasValueRel {
  return !!hasValueRel_;
}
- (void) setHasValueRel:(BOOL) value {
  hasValueRel_ = !!value;
}
@synthesize valueRel;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.valueAbs = 0;
    self.valueRel = 0;
  }
  return self;
}
static DmsUpdate* defaultDmsUpdateInstance = nil;
+ (void) initialize {
  if (self == [DmsUpdate class]) {
    defaultDmsUpdateInstance = [[DmsUpdate alloc] init];
  }
}
+ (DmsUpdate*) defaultInstance {
  return defaultDmsUpdateInstance;
}
- (DmsUpdate*) defaultInstance {
  return defaultDmsUpdateInstance;
}
- (BOOL) isInitialized {
  if (!self.hasValueAbs) {
    return NO;
  }
  if (!self.hasValueRel) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasValueAbs) {
    [output writeUInt32:1 value:self.valueAbs];
  }
  if (self.hasValueRel) {
    [output writeUInt32:2 value:self.valueRel];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasValueAbs) {
    size += computeUInt32Size(1, self.valueAbs);
  }
  if (self.hasValueRel) {
    size += computeUInt32Size(2, self.valueRel);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (DmsUpdate*) parseFromData:(NSData*) data {
  return (DmsUpdate*)[[[DmsUpdate builder] mergeFromData:data] build];
}
+ (DmsUpdate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DmsUpdate*)[[[DmsUpdate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DmsUpdate*) parseFromInputStream:(NSInputStream*) input {
  return (DmsUpdate*)[[[DmsUpdate builder] mergeFromInputStream:input] build];
}
+ (DmsUpdate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DmsUpdate*)[[[DmsUpdate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DmsUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DmsUpdate*)[[[DmsUpdate builder] mergeFromCodedInputStream:input] build];
}
+ (DmsUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DmsUpdate*)[[[DmsUpdate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DmsUpdate_Builder*) builder {
  return [[[DmsUpdate_Builder alloc] init] autorelease];
}
+ (DmsUpdate_Builder*) builderWithPrototype:(DmsUpdate*) prototype {
  return [[DmsUpdate builder] mergeFrom:prototype];
}
- (DmsUpdate_Builder*) builder {
  return [DmsUpdate builder];
}
@end

@interface DmsUpdate_Builder()
@property (retain) DmsUpdate* result;
@end

@implementation DmsUpdate_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[DmsUpdate alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DmsUpdate_Builder*) clear {
  self.result = [[[DmsUpdate alloc] init] autorelease];
  return self;
}
- (DmsUpdate_Builder*) clone {
  return [DmsUpdate builderWithPrototype:result];
}
- (DmsUpdate*) defaultInstance {
  return [DmsUpdate defaultInstance];
}
- (DmsUpdate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DmsUpdate*) buildPartial {
  DmsUpdate* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (DmsUpdate_Builder*) mergeFrom:(DmsUpdate*) other {
  if (other == [DmsUpdate defaultInstance]) {
    return self;
  }
  if (other.hasValueAbs) {
    [self setValueAbs:other.valueAbs];
  }
  if (other.hasValueRel) {
    [self setValueRel:other.valueRel];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DmsUpdate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DmsUpdate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setValueAbs:[input readUInt32]];
        break;
      }
      case 16: {
        [self setValueRel:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasValueAbs {
  return result.hasValueAbs;
}
- (uint32_t) valueAbs {
  return result.valueAbs;
}
- (DmsUpdate_Builder*) setValueAbs:(uint32_t) value {
  result.hasValueAbs = YES;
  result.valueAbs = value;
  return self;
}
- (DmsUpdate_Builder*) clearValueAbs {
  result.hasValueAbs = NO;
  result.valueAbs = 0;
  return self;
}
- (BOOL) hasValueRel {
  return result.hasValueRel;
}
- (uint32_t) valueRel {
  return result.valueRel;
}
- (DmsUpdate_Builder*) setValueRel:(uint32_t) value {
  result.hasValueRel = YES;
  result.valueRel = value;
  return self;
}
- (DmsUpdate_Builder*) clearValueRel {
  result.hasValueRel = NO;
  result.valueRel = 0;
  return self;
}
@end

@interface DmsLoaded ()
@property uint32_t dmsId;
@property BOOL isLoaded;
@end

@implementation DmsLoaded

- (BOOL) hasDmsId {
  return !!hasDmsId_;
}
- (void) setHasDmsId:(BOOL) value {
  hasDmsId_ = !!value;
}
@synthesize dmsId;
- (BOOL) hasIsLoaded {
  return !!hasIsLoaded_;
}
- (void) setHasIsLoaded:(BOOL) value {
  hasIsLoaded_ = !!value;
}
- (BOOL) isLoaded {
  return !!isLoaded_;
}
- (void) setIsLoaded:(BOOL) value {
  isLoaded_ = !!value;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.dmsId = 0;
    self.isLoaded = NO;
  }
  return self;
}
static DmsLoaded* defaultDmsLoadedInstance = nil;
+ (void) initialize {
  if (self == [DmsLoaded class]) {
    defaultDmsLoadedInstance = [[DmsLoaded alloc] init];
  }
}
+ (DmsLoaded*) defaultInstance {
  return defaultDmsLoadedInstance;
}
- (DmsLoaded*) defaultInstance {
  return defaultDmsLoadedInstance;
}
- (BOOL) isInitialized {
  if (!self.hasDmsId) {
    return NO;
  }
  if (!self.hasIsLoaded) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDmsId) {
    [output writeUInt32:1 value:self.dmsId];
  }
  if (self.hasIsLoaded) {
    [output writeBool:2 value:self.isLoaded];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDmsId) {
    size += computeUInt32Size(1, self.dmsId);
  }
  if (self.hasIsLoaded) {
    size += computeBoolSize(2, self.isLoaded);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (DmsLoaded*) parseFromData:(NSData*) data {
  return (DmsLoaded*)[[[DmsLoaded builder] mergeFromData:data] build];
}
+ (DmsLoaded*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DmsLoaded*)[[[DmsLoaded builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DmsLoaded*) parseFromInputStream:(NSInputStream*) input {
  return (DmsLoaded*)[[[DmsLoaded builder] mergeFromInputStream:input] build];
}
+ (DmsLoaded*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DmsLoaded*)[[[DmsLoaded builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DmsLoaded*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DmsLoaded*)[[[DmsLoaded builder] mergeFromCodedInputStream:input] build];
}
+ (DmsLoaded*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DmsLoaded*)[[[DmsLoaded builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DmsLoaded_Builder*) builder {
  return [[[DmsLoaded_Builder alloc] init] autorelease];
}
+ (DmsLoaded_Builder*) builderWithPrototype:(DmsLoaded*) prototype {
  return [[DmsLoaded builder] mergeFrom:prototype];
}
- (DmsLoaded_Builder*) builder {
  return [DmsLoaded builder];
}
@end

@interface DmsLoaded_Builder()
@property (retain) DmsLoaded* result;
@end

@implementation DmsLoaded_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[DmsLoaded alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DmsLoaded_Builder*) clear {
  self.result = [[[DmsLoaded alloc] init] autorelease];
  return self;
}
- (DmsLoaded_Builder*) clone {
  return [DmsLoaded builderWithPrototype:result];
}
- (DmsLoaded*) defaultInstance {
  return [DmsLoaded defaultInstance];
}
- (DmsLoaded*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DmsLoaded*) buildPartial {
  DmsLoaded* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (DmsLoaded_Builder*) mergeFrom:(DmsLoaded*) other {
  if (other == [DmsLoaded defaultInstance]) {
    return self;
  }
  if (other.hasDmsId) {
    [self setDmsId:other.dmsId];
  }
  if (other.hasIsLoaded) {
    [self setIsLoaded:other.isLoaded];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DmsLoaded_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DmsLoaded_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDmsId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setIsLoaded:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasDmsId {
  return result.hasDmsId;
}
- (uint32_t) dmsId {
  return result.dmsId;
}
- (DmsLoaded_Builder*) setDmsId:(uint32_t) value {
  result.hasDmsId = YES;
  result.dmsId = value;
  return self;
}
- (DmsLoaded_Builder*) clearDmsId {
  result.hasDmsId = NO;
  result.dmsId = 0;
  return self;
}
- (BOOL) hasIsLoaded {
  return result.hasIsLoaded;
}
- (BOOL) isLoaded {
  return result.isLoaded;
}
- (DmsLoaded_Builder*) setIsLoaded:(BOOL) value {
  result.hasIsLoaded = YES;
  result.isLoaded = value;
  return self;
}
- (DmsLoaded_Builder*) clearIsLoaded {
  result.hasIsLoaded = NO;
  result.isLoaded = NO;
  return self;
}
@end

@interface TileLoaded ()
@property uint32_t tileId;
@property BOOL isLoaded;
@end

@implementation TileLoaded

- (BOOL) hasTileId {
  return !!hasTileId_;
}
- (void) setHasTileId:(BOOL) value {
  hasTileId_ = !!value;
}
@synthesize tileId;
- (BOOL) hasIsLoaded {
  return !!hasIsLoaded_;
}
- (void) setHasIsLoaded:(BOOL) value {
  hasIsLoaded_ = !!value;
}
- (BOOL) isLoaded {
  return !!isLoaded_;
}
- (void) setIsLoaded:(BOOL) value {
  isLoaded_ = !!value;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.tileId = 0;
    self.isLoaded = NO;
  }
  return self;
}
static TileLoaded* defaultTileLoadedInstance = nil;
+ (void) initialize {
  if (self == [TileLoaded class]) {
    defaultTileLoadedInstance = [[TileLoaded alloc] init];
  }
}
+ (TileLoaded*) defaultInstance {
  return defaultTileLoadedInstance;
}
- (TileLoaded*) defaultInstance {
  return defaultTileLoadedInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTileId) {
    return NO;
  }
  if (!self.hasIsLoaded) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTileId) {
    [output writeUInt32:1 value:self.tileId];
  }
  if (self.hasIsLoaded) {
    [output writeBool:2 value:self.isLoaded];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasTileId) {
    size += computeUInt32Size(1, self.tileId);
  }
  if (self.hasIsLoaded) {
    size += computeBoolSize(2, self.isLoaded);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TileLoaded*) parseFromData:(NSData*) data {
  return (TileLoaded*)[[[TileLoaded builder] mergeFromData:data] build];
}
+ (TileLoaded*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TileLoaded*)[[[TileLoaded builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TileLoaded*) parseFromInputStream:(NSInputStream*) input {
  return (TileLoaded*)[[[TileLoaded builder] mergeFromInputStream:input] build];
}
+ (TileLoaded*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TileLoaded*)[[[TileLoaded builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TileLoaded*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TileLoaded*)[[[TileLoaded builder] mergeFromCodedInputStream:input] build];
}
+ (TileLoaded*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TileLoaded*)[[[TileLoaded builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TileLoaded_Builder*) builder {
  return [[[TileLoaded_Builder alloc] init] autorelease];
}
+ (TileLoaded_Builder*) builderWithPrototype:(TileLoaded*) prototype {
  return [[TileLoaded builder] mergeFrom:prototype];
}
- (TileLoaded_Builder*) builder {
  return [TileLoaded builder];
}
@end

@interface TileLoaded_Builder()
@property (retain) TileLoaded* result;
@end

@implementation TileLoaded_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TileLoaded alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TileLoaded_Builder*) clear {
  self.result = [[[TileLoaded alloc] init] autorelease];
  return self;
}
- (TileLoaded_Builder*) clone {
  return [TileLoaded builderWithPrototype:result];
}
- (TileLoaded*) defaultInstance {
  return [TileLoaded defaultInstance];
}
- (TileLoaded*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TileLoaded*) buildPartial {
  TileLoaded* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TileLoaded_Builder*) mergeFrom:(TileLoaded*) other {
  if (other == [TileLoaded defaultInstance]) {
    return self;
  }
  if (other.hasTileId) {
    [self setTileId:other.tileId];
  }
  if (other.hasIsLoaded) {
    [self setIsLoaded:other.isLoaded];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TileLoaded_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TileLoaded_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTileId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setIsLoaded:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasTileId {
  return result.hasTileId;
}
- (uint32_t) tileId {
  return result.tileId;
}
- (TileLoaded_Builder*) setTileId:(uint32_t) value {
  result.hasTileId = YES;
  result.tileId = value;
  return self;
}
- (TileLoaded_Builder*) clearTileId {
  result.hasTileId = NO;
  result.tileId = 0;
  return self;
}
- (BOOL) hasIsLoaded {
  return result.hasIsLoaded;
}
- (BOOL) isLoaded {
  return result.isLoaded;
}
- (TileLoaded_Builder*) setIsLoaded:(BOOL) value {
  result.hasIsLoaded = YES;
  result.isLoaded = value;
  return self;
}
- (TileLoaded_Builder*) clearIsLoaded {
  result.hasIsLoaded = NO;
  result.isLoaded = NO;
  return self;
}
@end

@interface Custom ()
@property (retain) NSData* bytes;
@end

@implementation Custom

- (BOOL) hasBytes {
  return !!hasBytes_;
}
- (void) setHasBytes:(BOOL) value {
  hasBytes_ = !!value;
}
@synthesize bytes;
- (void) dealloc {
  self.bytes = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.bytes = [NSData data];
  }
  return self;
}
static Custom* defaultCustomInstance = nil;
+ (void) initialize {
  if (self == [Custom class]) {
    defaultCustomInstance = [[Custom alloc] init];
  }
}
+ (Custom*) defaultInstance {
  return defaultCustomInstance;
}
- (Custom*) defaultInstance {
  return defaultCustomInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBytes) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBytes) {
    [output writeData:1 value:self.bytes];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasBytes) {
    size += computeDataSize(1, self.bytes);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Custom*) parseFromData:(NSData*) data {
  return (Custom*)[[[Custom builder] mergeFromData:data] build];
}
+ (Custom*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Custom*)[[[Custom builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Custom*) parseFromInputStream:(NSInputStream*) input {
  return (Custom*)[[[Custom builder] mergeFromInputStream:input] build];
}
+ (Custom*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Custom*)[[[Custom builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Custom*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Custom*)[[[Custom builder] mergeFromCodedInputStream:input] build];
}
+ (Custom*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Custom*)[[[Custom builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Custom_Builder*) builder {
  return [[[Custom_Builder alloc] init] autorelease];
}
+ (Custom_Builder*) builderWithPrototype:(Custom*) prototype {
  return [[Custom builder] mergeFrom:prototype];
}
- (Custom_Builder*) builder {
  return [Custom builder];
}
@end

@interface Custom_Builder()
@property (retain) Custom* result;
@end

@implementation Custom_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Custom alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Custom_Builder*) clear {
  self.result = [[[Custom alloc] init] autorelease];
  return self;
}
- (Custom_Builder*) clone {
  return [Custom builderWithPrototype:result];
}
- (Custom*) defaultInstance {
  return [Custom defaultInstance];
}
- (Custom*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Custom*) buildPartial {
  Custom* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Custom_Builder*) mergeFrom:(Custom*) other {
  if (other == [Custom defaultInstance]) {
    return self;
  }
  if (other.hasBytes) {
    [self setBytes:other.bytes];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Custom_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Custom_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBytes:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasBytes {
  return result.hasBytes;
}
- (NSData*) bytes {
  return result.bytes;
}
- (Custom_Builder*) setBytes:(NSData*) value {
  result.hasBytes = YES;
  result.bytes = value;
  return self;
}
- (Custom_Builder*) clearBytes {
  result.hasBytes = NO;
  result.bytes = [NSData data];
  return self;
}
@end

